#include <bits/stdc++.h>
using namespace std;

struct My_Queue
{
    int front,rear;
    int *arr;
    int cap;
    My_Queue(int n)
    {
        cap=n;
        front=-1;
        rear=-1;
        arr=new int [cap];
    }
    bool isEmpty()
    {
        if(front==-1&&rear==-1)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }
    bool isFull()
    {
        if((rear+1)%cap==front)
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }
    void enqueue(int x)
    {
        if(isFull())
        {
            return;
        }
        else if(isEmpty())
        {
            front=0;
            rear=0;
            
        }
        else
        {
            rear=(rear+1)%cap;
        }
        
        arr[rear]=x;
        
        
    }
    int dequeue()
    {
        int x=0;
        
        if(isEmpty())
        {
            return INT_MAX;
        }
        else if(front==0&&rear==0)
        {
            x=arr[front];
            front=rear=-1;
        }
        else
        {
            x=arr[front];
            front=(front+1)%cap;
        }
        return x;
        
    }
    void display()
    {
        if(rear==front==-1)
        {
            cout<<"\nQueue is empty";
        }
        else if(rear>=front)
        {
            for(int i=0;i<=rear;i++)
            {
                cout<<arr[i]<<"\t";
            }
        }
        else
        {
            for(int i=front;i<cap;i++)
            {
                cout<<arr[i]<<"\t";
                
            }
            for(int i=0;i<=rear;i++)
            {
                cout<<arr[i]<<"\t";
                
            }
            
        }
    }
};

int main()
{
    My_Queue q(4);
    q.enqueue(0);
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    cout<<q.dequeue()<<endl;
    q.display();
    cout<<endl;
    q.enqueue(4);
    q.display();
    
    return 0;
}
