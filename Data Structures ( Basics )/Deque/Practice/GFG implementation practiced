#include<iostream>
using namespace std;
#define MAX 5

struct Deque
{
	int arr[MAX];
	int front;
	int rear;
	int n,size;

	Deque(int c)
	{
		front = -1;
		rear = -1;
		n=size=c-1;
	}

	// Operations on Deque:
	void insertfront(int key);
	void insertrear(int key);
	void deletefront();
	void deleterear();
	bool isFull();
	bool isEmpty();
	int getFront();
	int getRear();
};

// Checks whether Deque is full or not.
bool Deque::isFull()
{
    if((front==0&&rear==n)||rear+1==front)
    {
        return true;
    }
    else
    {
        return false;
    }

}

// Checks whether Deque is empty or not.
bool Deque::isEmpty ()
{
    if(front==-1&&rear==-1)
    {
        return true;
        
    }
    else
    {
        return false;
    }
}

// Inserts an element at front
void Deque::insertfront(int key)
{
    if(isFull())
    {
        cout<<"Overflow"<<endl;
        return;
    }
    else if(front==-1&&rear==-1)
    {
        front=rear=0;
        
    }
    else if(front==0)
    {
        front=size;
    }
    else 
    {
        front--;
    }
    arr[front]=key;
}

// function to inset element at rear end
// of Deque.
void Deque ::insertrear(int key)
{
    if(isFull())
    {
        cout<<"Overflow"<<endl;
        return;
    }
    else if(front==-1&&rear==-1)
    {
        front=rear=0;
        
    }
    else if(rear==size)
    {
        rear=0;
    }
	else
	{
	    rear++;
	}
	arr[rear]=key;
	
}

// Deletes element at front end of Deque
void Deque ::deletefront()
{
    if(isEmpty())
    {
        cout<<"Underflow"<<endl;
    }
    else if(front==0&&rear==0)
    {
        front=rear=-1;
    }
    else if(front==size)
    {
        front=0;
    }
    else
    {
        front++;
    }
}

// Delete element at rear end of Deque
void Deque::deleterear()
{
    if(isEmpty())
    {
        cout<<"Underflow"<<endl;
    }
    else if(front==0&&rear==0)
    {
        front=rear=-1;
    }
    else if(rear==0)
    {
        rear=size;
    }
    else
    {
        rear--;
    }
	
}

// Returns front element of Deque
int Deque::getFront()
{
    if(isEmpty())
    {
        cout<<"Underflow"<<endl;
        return -1;
    }
    return arr[front];
    
	
}

// function return rear element of Deque
int Deque::getRear()
{
    if(isEmpty())
    {
        cout<<"Underflow"<<endl;
        return -1;
    }
    return arr[rear];
	
}

// Driver program to test above function
int main()
{
	Deque dq(5);
	cout << "Insert element at rear end : 5 \n";
	dq.insertrear(5);

	cout << "insert element at rear end : 10 \n";
	dq.insertrear(10);

	cout << "get rear element " << " "
		<< dq.getRear() << endl;

	dq.deleterear();
	cout << "After delete rear element new rear"
		<< " become " << dq.getRear() << endl;

	cout << "inserting element at front end \n";
	dq.insertfront(15);

	cout << "get front element " << " "
		<< dq.getFront() << endl;

	dq.deletefront();

	cout << "After delete front element new "
	<< "front become " << dq.getFront() << endl;
	return 0;
}
